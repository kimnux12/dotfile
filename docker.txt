1. sudo pacman -S docker

2. systemctl enable docker.service

3. systemctl start docker.service

4. cat /etc/group | grep -i docker # docker 그룹이 만들어졌는지 확인

5. id -a kimnux   # 먼저 내 계정의 소속 그룹들을 확인

6. sudo usermod -aG docker kimnux   # -a : append, -G : 원하는 그룹

7. id -a kimnux   # 제대로 만들어 졌는지 확인

8. 재로그인

9. docker ps   # 컨테이너 확인

10. docker images    # 도커 이미지 확인

11. php,apache,postgresql을 docker compose (아치리눅스는 별도 설치필요)로
    컨테이너 설치하기.
	(참고 : https://thriveread.com/docker-compose-with-apache-php-and-postgresql/ )
    php-docker-webserver, postgres, dpage/pgadmin4 3개의 container가 설치된다.

    -> docker images
    REPOSITORY             TAG       IMAGE ID       CREATED          SIZE
	php-docker-webserver   latest    bc431667e6ec   19 minutes ago   537MB
	dpage/pgadmin4         latest    9afef3437248   5 days ago       475MB
	postgres               16.0      fbd1be2cbb1f   3 months ago     417MB

12. docker compose로 관리하기 위해 docker-compose.yml 파일를 생성하고 위의 이미지들을
    설치한것이기 때문에 docker-compose 명령어들로 프로젝트들을 관리한다.

    #Foreground로 도커 컴포즈 프로젝트 실행
		$ docker-compose up

	#Background로 도커 컴포즈 프로젝트 실행
		$ docker-compose up -d

	#프로젝트 이름 my-project로 변경하여 도커 컴포즈 프로젝트 실행
		$ docker-compose -p my-project up -d   # -d : background로 실행
	
	#docker-compose scale 명령어로 각 서비스에 여러개의 컨테이너를 생성
	#단, scale 시 주의할 점은 포트를 여러개 지정하면 충돌이 나므로 호스트 포트는 하나만
	#지정해주어야 한다.
		$docker-compose scale [서비스명] = [컨테이너 개수]

	-d 옵션 : 토커 컴포즈 프로젝트를 백그라운드로 실행
	-p 옵션 : 프로젝트 이름을 변경하여 도커 컴포즈 프로젝트 실행

13. 도커 컴포즈 프로젝트 종료
	# 프로젝트 내 컨테이너 및 네트워크 종료 및 제거
	$ docker-compose down

	# 프로젝트 내 컨테이너 및 네트워크 및 볼륨 종료 및 제거
	$ docker-compose down -v

14. 도커 컴포즈 프로젝트 목록 확인
	$ docker-compose ps

15. Dockerfile을 수정했다면
	$ docker-compose up --build -d

16. docker-compose.yml을 수정했다면
	$ docker-compose up --force-recreate -d




	
#아래의 것들은 컨테이너들을 개별적으로 조정하는 명령어들임. 

12. docker stop
    docker rm

13. 모든 이미지 삭제
	docker rmi $(docker images -q) -f

** /var/lib/docker/overlay2에 l을 제외하고 찌꺼기가 많이 있다면
docker system prune -af 로 삭제할 수 있다.



14. 도커 컨테이너 생성
	docker run    (접속까지 하려면 docker exec -it 컨테이너ID /bin/bash)
	              (컨테이너 빠져나오기는 exit 입력)
	
**. vim에서 docker 관련 명령들을 수행할 수 있는 플러그인
    denops-docker.vim ( https://github.com/skanehira/denops-docker.vim )
	deno라는 프로그램을 먼저 설치 해야하는데, 이것 또한 docker로 설치할 수 있을 것 같다.
	확인 필요함.
